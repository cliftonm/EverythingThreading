<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Everything Threading</title>
</head>

<body>

<p>Everything Threading</p>
<p>Various approaches to threading and discussing of locks, semaphores, 
concurrent collections, work queues, and thread joining</p>
<h2>Introduction</h2>
<p>I was recently asked to provide some training on how threads are used in C#.&nbsp; 
What started off as simple (doesn't it always) turned into a detailed analysis 
of different approaches to threading and various ancillary topics.&nbsp; While 
this is all been discussed before, I'm not sure there exists a comprehensive 
look at threading, which hopefully this article succinctly covers.</p>
<h3>Coming Up With a Good Thread Example</h3>
<p>The first problem of course is coming up with a good example where the work 
is capable of being broken up into isolated chunks and that takes a reasonable 
amount of computational time so you can really see the difference in approaches.&nbsp; 
I chose a brute force &quot;is the number prime&quot; algorithm.&nbsp; And I truly mean 
brute force:</p>
<pre>static bool IsPrime(int n)
{
  bool ret = true;
  for (int i = 2; i &lt;= n / 2 &amp;&amp; ret; ret = n % i++ != 0);
  return ret;
}</pre>
<p>Yes, there actually is no content to the for loop -- it does end in a <code>;</code>.</p>
<p>Obviously, you would NEVER write a prime number calculation this way (a much 
better approach is the 
<a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of 
Eranthoses</a>, which I'll actually work with 
later in this article) but this algorithm has the advantage of:</p>
<ul>
	<li>Being slow.</li>
	<li>Returning a true/false for each number.</li>
</ul>
<p>This is an advantage when writing an article about the nuances of threads!</p>
<h3>The Timing Algorithm</h3>
<p>To time things, I wrote a simple &quot;time how long this function takes&quot;:</p>
<pre>static void DurationOf(Func&lt;int&gt; action, string section)
{
  var start = DateTime.Now;
  int numPrimes = action();
  var stop = DateTime.Now;

  lock (locker)
  {
    Console.WriteLine(section);
    Console.WriteLine(&quot;Number of primes is : &quot; + numPrimes);
    Console.WriteLine(&quot;Total seconds = &quot; + (stop - start).TotalSeconds);
  }
}</pre>
<p>It's rather tailored to the examples here in this article.</p>
<h3>Locks</h3>
<p>Let's talk about locks right now.&nbsp; Notice in the above code the <code>lock</code> 
statement.&nbsp; The <code>lock</code> ensures that each <code>Console.WriteLine</code> is not 
&quot;interrupted&quot; by another thread also writing to the console.&nbsp; A 
lock statement requires an <code>object</code> that all threads can access which acts as the 
synchronization object between threads.&nbsp; Typically, the synchronization 
object is a root level <code>Object</code>:</p>
<pre>static object locker = new object();</pre>
<p align="f">Historically, the concept of a lock was called a &quot;critical 
section&quot;, meaning that only one thread could enter the code at a time.&nbsp; 
Native Windows programmers will be familiar with the CRITICAL_SECTION<sup>4</sup> 
structure and related methods.</p>
<p>Locks can be dangerous:</p>
<ul>
	<li>If what you're performing in the lock takes a long time, your thread 
	will lose performance as it waits for the lock to be released by another 
	thread.</li>
	<li>It's fairly easy to create a deadlock in which thread A is waiting for 
	the lock to be released, and thread B, currently inside the lock, is waiting 
	for thread A to finish some task.</li>
</ul>
<p>The body of a lock statement should never include anything that waits for a 
thread to do some work.&nbsp; However, locks are useful when doing simple 
synchronization, particularly of debug output or synchronizing access to a 
physical &quot;thing&quot; like a hardware port.&nbsp; Otherwise, if there's a <code>lock</code> in 
your code, it's probably a big red flag.</p>
<h3>A Helper Method for the Brute Force Algorithm</h3>
<p>This is called by several of the variations of brute force algorithm that are 
to demonstrate threading, so it's useful to implement it once.</p>
<pre>static int NumPrimes(int start, int end)
{
  int numPrimes = 0;
  for (int i = start; i &lt; end; numPrimes += IsPrime(i++) ? 1 : 0);
  return numPrimes;
}</pre>
<p>Yeah, another one of those do-nothing loops where the work is done in the 
iterator portion of the for loop. </p>
<h2>Brute Force Algorithm</h2>
<p>Here we want to find how many primes there are between 2 and 500,000.&nbsp; I 
chose 500,000 as the maximum as it takes about 35 seconds on my machine to 
determine that there are 41,538 prime numbers.&nbsp; </p>
<p>Calling the algorithm:</p>
<pre>DurationOf(BruteForce, &quot;Brute force:&quot;);</pre>
<p>The implementation:</p>
<pre>static int BruteForce()
{
  int numPrimes = NumPrimes(2, MAX);

  return numPrimes;
}
</pre>
<p>The results:</p>
<pre>Brute force:
Number of primes is : 41538
Total seconds = 30.1119874</pre>
<h2>Threaded The Brute Force Algorithm</h2>
<p>Let's take a stab at optimizing this by breaking the work up into chunks and 
giving each thread (up to the number of processors) the chunk to work on.&nbsp; 
We'll evenly divide the chunks.&nbsp; The astute reader will realize that is not 
optimal, but we'll illustrate why and discuss one of the important things about 
multi-threading -- make sure your work load is evenly distributed!</p>
<p>Keep in mind that what I'm about to show you is rather old school!</p>
<p>Calling the algorithm:</p>
<pre>DurationOf(ThreadedBruteForce, &quot;Threaded brute force:&quot;);</pre>
<p>The implementation:</p>
<p>First, setting up the threads:</p>
<pre>static int ThreadedBruteForce()
{
  List&lt;(Thread thread, int threadNum, int start, int end)&gt; threads = new List&lt;(Thread thread, int threadNum, int start, int end)&gt;();

  int numProcs = Environment.ProcessorCount;

  for (int i = 0; i &lt; numProcs; i++)
  {
    int start = Math.Max(1, i * (MAX / numProcs)) + 1;
    int end = (i + 1) * (MAX / numProcs);
    var thread = new Thread(new ParameterizedThreadStart(BruteForceThread));
    thread.IsBackground = true;
    threads.Add((thread, i, start, end));
  }

  totalNumPrimes = 0;
  threads.ForEach(t =&gt; t.thread.Start((t.threadNum, t.start, t.end)));
  threads.ForEach(t =&gt; t.thread.Join());

  return totalNumPrimes;
}</pre>
<p>The worker thread:</p>
<pre>static void BruteForceThread(object parms)
{
  (int threadNum, int start, int end) parm = (ValueTuple&lt;int, int, int&gt;)parms;
  DurationOf(() =&gt;
  {
    int numPrimes = NumPrimes(parm.start, parm.end);
    Interlocked.Add(ref totalNumPrimes, numPrimes);
    return numPrimes;
  }, $&quot;Thread {parm.threadNum} processing {parm.start} to {parm.end}&quot;);
}</pre>
<p>The results:</p>
<pre>Thread 0 processing 2 to 125000
Number of primes is : 11734
Total seconds = 3.8519907
Thread 1 processing 125001 to 250000
Number of primes is : 10310
Total seconds = 9.0879819
Thread 2 processing 250001 to 375000
Number of primes is : 9860
Total seconds = 12.963975
Thread 3 processing 375001 to 500000
Number of primes is : 9634
Total seconds = 16.4079704
Threaded brute force:
Number of primes is : 41538
Total seconds = 16.4119713</pre>
<p>OK, cool, we've taken a 35 second process and reduced it to 16 seconds.&nbsp; 
But notice that the workload is not evenly distributed.&nbsp; The threads take 
different times.&nbsp; The reason should be obvious -- the larger the number 
we're trying to determine is prime or not, the more divisions need to be 
executed.&nbsp; So for numbers at the lower range, the thread finishes faster:</p>
<pre>Thread 0 processing 2 to 125000
Number of primes is : 11734
Total seconds = 3.8519907</pre>
<p>vs:</p>
<pre>Thread 3 processing 375001 to 500000
Number of primes is : 9634
Total seconds = 16.4079704</pre>
<h3>Thread Joins</h3>
<p>Notice once the threads have been started, there is this statement:</p>
<pre>threads.ForEach(t =&gt; t.thread.Join());</pre>
<p>Here the Join method suspends execution until the thread on which Join is 
called has finished.&nbsp; Be aware:</p>
<ul>
	<li>This can cause the current thread to indefinitely suspend its operation.</li>
	<li>You wouldn't do this on a UI thread as the UI will no longer respond to 
	user actions.</li>
</ul>
<h3>Background Threads</h3>
<p>Notice this statement:</p>
<pre>thread.IsBackground = true;</pre>
<p>Telling the thread that it is a background thread ensures that it is killed 
when the application exits.&nbsp; If you have a thread that is not a background 
thread and you close the application or it in some other way terminates, the 
thread will continue to exist (and run) as a process.</p>
<h3>Thread Parameters</h3>
<p>Notice this statement:</p>
<pre>var thread = new Thread(new ParameterizedThreadStart(BruteForceThread));</pre>
<p>Here we are setting up the method that implements the thread to accept 
parameters.&nbsp; The signature must be <code>[methodName](object parameters)</code>, 
which requires that you cast the object to the same type being passed in when 
the thread is started:</p>
<p>Starting the thread (I'm using a value tuple as the parameter):</p>
<pre>threads.ForEach(t =&gt; t.thread.Start((t.threadNum, t.start, t.end)));</pre>
<p>Casting the object (a value tuple in this case) in the method implementing 
the thread:</p>
<pre>(int threadNum, int start, int end) parm = (ValueTuple&lt;int, int, int&gt;)parms;</pre>
<h3>Avoiding Casting the Object Parameter With a Lambda Expression</h3>
<p>You can avoid the cast using an lambda expression which provides closure for 
the current parameter values, like this:</p>
<pre>for (int i = 0; i &lt; numProcs; i++)
{
  int j = i;
  int start = Math.Max(1, i * (MAX / numProcs)) + 1;
  int end = (i + 1) * (MAX / numProcs);
  var thread = new Thread(() =&gt; BruteForceThread(j, start, end));
  thread.IsBackground = true;
  threads.Add((thread, i, start, end));
}</pre>
<p>Notice&nbsp;<code>int j = i;</code> is required for the closure -- otherwise 
the thread number (not to be confused with the thread ID) is always the number 
of processors (4 in my examples, usually.)</p>
<p>Also notice that this works but is not necessary:</p>
<pre>var thread = new Thread(new ThreadStart(() =&gt; BruteForceThread(j, start, end)));</pre>
<p>Why?&nbsp; Because <code>ThreadStart</code> is defined as a delegate: <code>public delegate void ThreadStart();</code>so a 
lambda expression is perfectly valid.</p>
<p>The method implementing the thread now can accept parameters in the method 
signature, avoiding the cast:</p>
<pre>static void BruteForceThread(int threadNum, int start, int end)</pre>
<h3>Using the ThreadStart Delegate is Time Costly!</h3>
<p>These two lines of code are NOT equivalent:</p>
<pre>var thread = new Thread(() =&gt; BruteForceThread(j, start, end));</pre>
<p>vs.</p>
<pre>var thread = new Thread(new ThreadStart(() =&gt; BruteForceThread(j, start, end)));</pre>
<p>Notice the timing difference in the second version:</p>
<pre>Thread 0 processing 2 to 125000
Number of primes is : 11734
Total seconds = 4.3607559
Thread 1 processing 125001 to 250000
Number of primes is : 10310
Total seconds = 10.5416041
Thread 2 processing 250001 to 375000
Number of primes is : 9860
Total seconds = 14.9788427
Thread 3 processing 375001 to 500000
Number of primes is : 9634
Total seconds = 19.2458287
Threaded brute force:
Number of primes is : 41538
Total seconds = 19.2458287</pre>
<p>Roughly: </p>
<ul>
	<li>thread 0 take .5 seconds longer</li>
	<li>thread 1 and 2 take 1.5 seconds longer</li>
	<li>thread 3 takes almost 3 seconds longer</li>
</ul>
<p>This isn't just an anomaly, this is a consistent repeatable difference.&nbsp; 
I have not found any discussion of why this is the case.</p>
<h2>Balancing the Brute Force Algorithm Threads</h2>
<p><img border="0" src="cpua1.png" width="440" height="248"></p>
<p>Notice that the worker threads are not very balanced -- the work load <i>
looks</i> like it is evenly distributed because we're giving each thread 1/n<sup>th</sup> 
(where n is the number of processors) of the work, but due to the nature of the 
work, CPU cores are not efficiently used -- the thread with the lowest number 
range finishes much sooner than the thread with the highest number range.</p>
<h3>Asking for Work vs. Telling the Thread What Work to Do</h3>
<p>A clue as to whether your threads are optimized is this: are you telling your 
threads what work to do, or are your threads requesting work?&nbsp; In the 
threaded brute force algorithm above, we are <i>telling</i> the thread what work 
it should be doing.&nbsp; In this next iteration, the thread will be <i>asking</i> 
for work when it is available.</p>
<p>Calling the algorithm</p>
<pre>DurationOf(ThreadedGetNextWorkItemBruteForce, &quot;Threaded get next work item brute force:&quot;);</pre>
<p>The implementation:</p>
<pre>static int ThreadedGetNextWorkItemBruteForce()
{
  List&lt;(Thread thread, int threadNum)&gt; threads = new List&lt;(Thread thread, int threadNum)&gt;();
  int numProcs = Environment.ProcessorCount;

  for (int i = 0; i &lt; numProcs; i++)
  {
    var thread = new Thread(new ParameterizedThreadStart(NextWorkItemBruteForceThread));
    thread.IsBackground = true;
    threads.Add((thread, i));
  }

  totalNumPrimes = 0;
  nextNumber = 1;
  threads.ForEach(t =&gt; t.thread.Start(t.threadNum));
  threads.ForEach(t =&gt; t.thread.Join());

  return totalNumPrimes;
}</pre>
<p>The worker thread:</p>
<pre>static void NextWorkItemBruteForceThread(object parms)
{
  int threadNum = (int)parms;
  DurationOf(() =&gt;
  {
    int numPrimes = 0;
    int n;

    while ((n = Interlocked.Increment(ref nextNumber)) &lt; MAX)
    {
      if (IsPrime(n))
      {
        ++numPrimes;
      }
    }

    Interlocked.Add(ref totalNumPrimes, numPrimes);

    return numPrimes;
  }, $&quot;Thread: {threadNum}&quot;);
}</pre>
<p>The results:</p>
<p><img border="0" src="cpua2.png" width="434" height="245"></p>
<pre>Thread: 3
Number of primes is : 10446
Total seconds = 13.2079996
Thread: 2
Number of primes is : 10378
Total seconds = 13.2079996
Thread: 0
Number of primes is : 10437
Total seconds = 13.2079996
Thread: 1
Number of primes is : 10277
Total seconds = 13.2079996
Threaded get next work item brute force:
Number of primes is : 41538
Total seconds = 13.2079996</pre>
<p>Notice now that each thread actually runs for exactly the same amount of time 
(that was actually a fluke of that particular test run, they do vary ever so 
slightly.)&nbsp; Also notice we're using our threads efficiently now -- we've 
shaved 6 seconds off the processing time because each core is fully utilized, 
and the core utilization is much more efficient.</p>
<h3>Interlocked and Atomic</h3>
<p>Notice these two lines:</p>
<pre>while ((n = Interlocked.Increment(ref nextNumber)) &lt; MAX)
...
Interlocked.Add(ref totalNumPrimes, numPrimes);</pre>
<p>The way this worker thread requests work is to simply get the next number to 
process -- there's no queuing of work, semaphores, or other complexity.&nbsp; 
However, in order to get the next number and update the total count, each thread 
must ensure that it momentarily blocks the other threads.&nbsp; Otherwise, 
another thread might get exactly the same number or the total might be updated 
simultaneously, resulting in an incorrect count.&nbsp; .NET has an <code>Interlocked</code> 
class (read more
<a href="https://msdn.microsoft.com/en-us/library/system.threading.interlocked(v=vs.110).aspx">
here</a>) that ensures that the operation is performed atomically, meaning that, 
even if several bytes of data are being changed, the operation is treated as a 
single, synchronous, change.&nbsp; Essentially, it's like writing a <code>lock</code> 
statement around the operation, however it is much more performant because the 
generated IL code (and ultimately the assembly code) can take advantage of CPU 
instructions to exchange the value in memory because you're doing something very 
specific.&nbsp; Using a <code>lock</code> statement, the compiler has no idea what you're 
really doing and can't optimize the code for you.&nbsp; In fact, the methods 
that <code>Interlocked</code> implements closely match the actual Intel CPU instructions<sup>1</sup> that are 
atomic and can therefore be locked.</p>
<h2>More &quot;Modern&quot; Ways of Working with Threads</h2>
<p>Nowadays, the junior programmer probably isn't even instructed regarding the 
<code>Thread</code> class and is instead taught one or more of the various other ways to fire 
off a thread.&nbsp; Learning about the underlying Thread class is however 
important because there are situations when you absolutely want to manage the 
thread yourself rather than letting the .NET framework manage the thread for 
you, particularly threads that interact with .NET's <code>ThreadPool</code> (more on that 
later.)&nbsp; Here are the most common options:</p>
<ul>
	<li>AsParallel - a LINQ extension on an Enumerable</li>
	<li>Task.Run - forcing an asynchronous method</li>
	<li>Task.Factory.StartNew<sup>8</sup> - equivalent to Task.Run but with some 
	defaults:<ul>
	<li>no cancellation token</li>
	<li>children cannot attach</li>
	<li>default task scheduler</li>
</ul>
	</li>
	<li>AsParallel - a PLINQ (parallel LINQ) extension on an Enumerable</li>
	<li>await - calling an asynchronous method with a continuation</li>
	<li>QueueUserWorkItem&nbsp; - queues work</li>
	<li>BackgroundWorker</li>
</ul>
<p>Most of these approaches use the .NET's <code>ThreadPool</code> with the potential 
exception of the &quot;await&quot; syntax in which you have more control over how the task 
is set up.&nbsp; Each also has its nuances regarding:</p>
<ul>
	<li>exception handling</li>
	<li>cancellation tokens</li>
	<li>progress reporting</li>
	<li>best practices with <code>ThreadPool</code></li>
</ul>
<p>One really needs to understand these nuances and how they affect performance 
and error handling.</p>
<h3>AsParallel</h3>
<p><code>AsParallel</code> is one of several query extension methods in the Parallel LINQ (<a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/introduction-to-plinq">PLINQ</a>) 
library.&nbsp; I'm not going to get into the details of the various methods in 
the <code>ParallelEnumerable</code> class, instead let's look at just <code>AsParallel</code>. </p>
<p>Calling the algorithm:</p>
<pre>DurationOf(AsParallelGetNextWorkItemBruteForce, &quot;AsParallel get next work item brute force:&quot;);</pre>
<p>The implementation:</p>
<pre>static int AsParallelGetNextWorkItemBruteForce()
{
  int totalNumPrimes = 0;

  var nums = Enumerable.Range(2, MAX);
  nums.AsParallel().ForAll(n =&gt;
  {
    if (IsPrime(n))
    {
      Interlocked.Increment(ref totalNumPrimes);
    }
  });

  return totalNumPrimes;
}</pre>
<p>Note the code&nbsp;&nbsp; <code>nums.AsParallel().ForAll</code>, which 
attempts, for each item in the enumerable, to execute in parallel the action 
action declared in <code>ForAll.</code></p>
<p>The results (don't compare this with the results above, currently I'm on a VM 
that seems to run faster than my laptop natively):</p>
<pre>AsParallel get next work item brute force:
Number of primes is : 41538
Total seconds = 11.7537395</pre>
<p>Compare with the balanced brute force thread timing:</p>
<pre>Thread: 1
Number of primes is : 10326
Total seconds = 11.7124344
Thread: 2
Number of primes is : 10517
Total seconds = 11.7124344
Thread: 0
Number of primes is : 10502
Total seconds = 11.7124344
Thread: 3
Number of primes is : 10193
Total seconds = 11.7134212
Threaded get next work item brute force:
Number of primes is : 41538
Total seconds = 11.7304613</pre>
<p>So that's neat -- the timing is essentially identical.</p>
<h3>Task.Run</h3>
<p><code>Task.Run</code> is one of the ways to implement a task-based 
asynchronous pattern<sup>3</sup> (TAP) quickly to create a worker thread.&nbsp; This is 
an example of what is called a &quot;compute-bound&quot; task, meaning that the task is 
performed by the CPU rather than the program waiting for a device (like a 
fingerprint reader) or connection (to a database, for example) to return a 
result.&nbsp; It's important to understand the difference between compute-bound io-bound tasks<sup>2</sup>, particularly with regards to threads managed by the 
ThreadPool, which should not block for large periods of time</p>
<p>Calling the algorithm:</p>
<pre>DurationOf(TaskRunGetNextWorkItemBruteForce, &quot;Task.Run get next work item brute force:&quot;);</pre>
<p>The implementation:</p>
<pre>static int TaskRunGetNextWorkItemBruteForce()
{
  int numProcs = Environment.ProcessorCount;
  totalNumPrimes = 0;
  nextNumber = 1;
  List&lt;Task&gt; tasks = new List&lt;Task&gt;();

  for (int i = 0; i &lt; numProcs; i++)
  {
    var task = Task.Run(() =&gt; NextWorkItemBruteForceThread(i));
    tasks.Add(task);
  }

  Task.WaitAll(tasks.ToArray());

  return totalNumPrimes;
}</pre>
<p>Notice the <code>Task.WaitAll</code>, which is like&nbsp; thread <code>Join</code> -- the current 
thread blocks until all tasks are complete.&nbsp; As with <code>Join</code>, use with 
caution!&nbsp; Also notice that we can call the same method, <code>NextWorkItemBruteForceThread(i)</code>, that performs the 
computation as we do in the balanced brute force thread setup routine.</p>
<p>The results (again don't compare with the previous results, I'm running on a 
different machine at the moment) - these compare quite well with <code>AsParallel</code> and 
the balanced brute force algorithm.</p>
<pre>Thread: 4
Number of primes is : 10369
Total seconds = 11.9374993
Thread: 4
Number of primes is : 10351
Total seconds = 11.9374993
Thread: 4
Number of primes is : 10293
Total seconds = 11.9374993
Thread: 4
Number of primes is : 10525
Total seconds = 11.9374993
Task.Run get next work item brute force:
Number of primes is : 41538
Total seconds = 11.953198</pre>
<h3>Using await</h3>
<p>This is a very simple example in which the above code is modified slightly to 
use the <code>await</code> keyword.&nbsp; Using <code>await</code> (along with the <code>async</code> 
keyword) has the following effect:</p>
<ol>
	<li>The method initiates the asynchronous process</li>
<li>It then immediately returns to the caller</li>
	<li>When the asynchronous process completes, code execution continues with 
	the code immediately after the <code>await</code> statement.</li>
</ol>
<p>There's a few &quot;gotcha's&quot; in this.&nbsp; First, it is useful to be aware 
of the context in which the continuation is executed.&nbsp; For WinForm 
applications in which the <code>await</code> was called on the application thread 
(the thread running the UI), execution 
is marshaled to continue on the application (UI) thread.&nbsp; If you're running a 
non-UI application, the continuation can occur on the same thread to which the 
asynchronous method was assigned, or a new thread!&nbsp; This behavior is 
controlled by the <code>SynchronizationContext</code><sup>5,6</sup> and discussion of this 
class is beyond the scope of this article.&nbsp; There's a good Code Project 
article series on the topic:
<a href="https://www.codeproject.com/Articles/31971/Understanding-SynchronizationContext-Part-I">
Part I</a>,
<a href="https://www.codeproject.com/Articles/32113/Understanding-SynchronizationContext-Part-II">
Part II</a>,
<a href="https://www.codeproject.com/Articles/32119/Understanding-SynchronizationContext-Part-III">
Part III</a>.</p>
<p>Second, I find the mental gyrations of &quot;return to caller and continue later&quot; 
to be difficult.&nbsp; The reason for this is that it's not obvious to the method performing the call 
to an <code>async</code> method will return immediately.&nbsp; This is why the guidance on 
these method names is to append them with &quot;Async&quot;.</p>
<p>Thirdly, the mental gyrations get even harder when there are nested <code>await</code> calls.</p>
<p>Conversely, the <code>Task</code> class provides some really useful features, particularly 
with regards to returning a result and passing exceptions back to you if an 
exception occurs while executing the task.</p>
<p>First, the implementation for the very simple example:</p>
<pre>static int TaskAwaitGetNextWorkItemBruteForce()
{
  int numProcs = Environment.ProcessorCount;
  totalNumPrimes = 0;
  nextNumber = 1;
  List&lt;Task&gt; tasks = new List&lt;Task&gt;();

  for (int i = 0; i &lt; numProcs; i++)
  {
    var task = DoWorkAsync(i);
    tasks.Add(task);
  }

  Task.WaitAll(tasks.ToArray());
  
  return totalNumPrimes;
}

static async Task DoWorkAsync(int threadNum)
{
  await Task.Run(() =&gt; NextWorkItemBruteForceThread(threadNum));
}</pre>
<p>Here, <code>DoWorkAsync</code> initiates the work and the <code>await</code> returns to the caller, 
<code>TaskAwaitGetNextWorkItemBruteForce</code>.&nbsp; This example is 
over-simplified because there is no continuation.&nbsp; Also notice that 
<code>DoWorkAsync</code> returns a Task but there's no explicit <code>return myTask;</code> statement.&nbsp; 
An <code>async</code> method can return a <code>Task&lt;TResult&gt;</code>, <code>Task</code>, <code>void</code>, or (C# 7) a type 
implementing a public <code>GetAwaiter</code> method<sup>7</sup>.</p>
<p>Let's look at a more useful example next -- here you'll see that we 
can remove the global variables that <code>NextWorkItemBruteForceThread</code> 
uses and instead return the result of the algorithm in the <code>TResult</code> 
generic type.&nbsp; This also removes the <code>Interlocked</code> call: <code>Interlocked.Add(ref 
totalNumPrimes, numPrimes)</code> which greatly improves the compartmentalization of 
the thread.&nbsp; Instead, we'll compute the total number of primes by summing 
the primes found by each asynchronous task.</p>
<p>The algorithm implementation:</p>
<pre>static int AwaitableBruteForceAlgorithm(object parms)
{
  int threadNum = (int)parms;
  int numPrimes = 0;

  DurationOf(() =&gt;
  {
    int n;

    while ((n = Interlocked.Increment(ref nextNumber)) &lt; MAX)
    {
      if (IsPrime(n))
      {
        ++numPrimes;
      }
    }

    return numPrimes;
  }, $&quot;Thread: {threadNum}&quot;);

  return numPrimes;
}</pre>
<p>The implementation:</p>
<pre>static int TaskAwaitGetNextWorkItemBruteForceWithReturn()
{
  int numProcs = Environment.ProcessorCount;
  nextNumber = 1;
  List&lt;Task&lt;int&gt;&gt; tasks = new List&lt;Task&lt;int&gt;&gt;();

  for (int i = 0; i &lt; numProcs; i++)
  {
    var task = DoWorkWithReturnAsync(i);
    tasks.Add(task);
  }

  Task.WaitAll(tasks.ToArray());

  return tasks.Sum(t =&gt; t.Result);
}

static async Task&lt;int&gt; DoWorkWithReturnAsync(int threadNum)
{
  return await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum));
}</pre>
<p>Notice here that the <code>DoWorkWithReturnAsync</code> method now requires a <code>return</code> 
keyword!&nbsp; Also, we're no longer using the global <code>totalNumPrimes</code>, as the 
results of all the tasks, once their complete, is summed and returned.</p>
<p>Let's make this example a wee bit more useful by adding a continuation that 
indicates that the thread is complete, and see what happens.</p>
<p>The implementation:</p>
<pre>static int TaskAwaitGetNextWorkItemBruteForceWithReturnAndContinuation()
{
  int numProcs = Environment.ProcessorCount;
  nextNumber = 1;
  List&lt;Task&lt;int&gt;&gt; tasks = new List&lt;Task&lt;int&gt;&gt;();

  for (int i = 0; i &lt; numProcs; i++)
  {
   Console.WriteLine(&quot;Starting thread &quot; + i + &quot; at &quot; + (DateTime.Now - start).TotalMilliseconds + &quot; ms&quot;);
   var task = DoWorkWithReturnAsyncAndContinuation(i);
    tasks.Add(task);
  }

  Task.WaitAll(tasks.ToArray());

    return tasks.Sum(t =&gt; t.Result);
  }

  static async Task&lt;int&gt; DoWorkWithReturnAsyncAndContinuation(int threadNum)
  {
    var t = await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum));

    lock (locker)
    {
      Console.WriteLine(&quot;Thread number &quot; + threadNum + &quot; finished.&quot;);
    }

  return t;
}</pre>
<p>The results:</p>
<pre>Starting thread 0 at 0 ms
Starting thread 1 at 0 ms
Starting thread 2 at 0 ms
Starting thread 3 at 0 ms
Thread: 3
Number of primes is : 10431
Total seconds = 13.4916976
Thread number 3 finished.
Thread: 2
Number of primes is : 10205
Total seconds = 13.4916976
Thread number 2 finished.
Thread: 0
Number of primes is : 10442
Total seconds = 13.4916976
Thread number 0 finished.
Thread: 1
Number of primes is : 10460
Total seconds = 13.4916976
Thread number 1 finished.
await Task.Run get next work item with return brute force and continuation:
Number of primes is : 41538
Total seconds = 13.5073256</pre>
<p>So this code should strike you as non-intuitive:</p>
<pre>static async Task&lt;int&gt; DoWorkWithReturnAsyncAndContinuation(int threadNum)
{
  var t = await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum));

  lock (locker)
  {
    Console.WriteLine(&quot;Thread number &quot; + threadNum + &quot; finished.&quot;);
  }

  return t;
}</pre>
<p>The await should return to the caller.&nbsp; It does -- we know this because 
we note that the tasks are created all at once -- there is no delay between the 
start times.&nbsp; But what does the method return?&nbsp; It returns a <code>Task&lt;int&gt;</code>, 
and the return statement is <i>after</i> the continuation.&nbsp; It's <i>not 
part of the continuation</i> which, when you think about it, can't return 
anything anyways!&nbsp; Furthermore, <code>t</code>, when used <i>inside the 
continuation</i> is the return (an int) of the method we're awaiting upon.&nbsp; 
So if we wanted to output the count of primes: we would write:</p>
<pre>Console.WriteLine(&quot;Count = &quot; + t);</pre>
<p>and <i>not</i> <code>t.Result</code>.&nbsp; But in the caller that receives 
<code>Task&lt;int&gt;</code>, we have to use <code>t.Result</code>.&nbsp; Wow.&nbsp; 
Just Wow, I say.&nbsp; And yes, if you're task creates another task, the outer 
return type is <code>Task&lt;Task&gt;</code>.&nbsp; If it's a three layer nested task, the return 
type will be <code>Task&lt;Task&lt;Task&gt;&gt;&gt;</code>.&nbsp; See what I mean by mind warping?</p>
<p>console output (your mileage will vary):</p>
<pre>Starting thread 0 at 0 ms
Starting thread 1 at 6.3902 ms
Starting thread 2 at 6.3902 ms
Starting thread 3 at 6.3902 ms
Thread: 0
Number of primes is : 10428
Total seconds = 13.3906041
Thread number 0 finished.
Count = 10428
Thread: 2
Number of primes is : 10270
Total seconds = 13.3916069
Thread: 3
Number of primes is : 10382
Total seconds = 13.3916069
Thread number 3 finished.
Count = 10382
Thread: 1
Number of primes is : 10458
Total seconds = 13.3916069
Thread number 1 finished.
Count = 10458
Thread number 2 finished.
Count = 10270
await Task.Run get next work item with return brute force and continuation:
Number of primes is : 41538
Total seconds = 13.4070216</pre>
<h3>Using await in WinForm Applications</h3>
<p><img border="0" src="winform1.png" width="403" height="423"></p>
<p>Taking that last algorithm above, let's look at what happens when we run this 
in a WinForm application instead of a console application.&nbsp; We get this 
result:</p>
<pre>Starting thread 0 at 0 ms
Starting thread 1 at 5.214 ms
Starting thread 2 at 5.214 ms
Starting thread 3 at 6.2169 ms
Thread: 3
Number of primes is : 7606
Total seconds = 13.7766322
Thread number 3 finished.
Count = 7606
Thread: 2
Number of primes is : 11114
Total seconds = 14.7672651
Thread: 1
Number of primes is : 11162
Total seconds = 14.7692709
Thread number 1 finished.
Count = 11162
Thread: 0
Number of primes is : 11656
Total seconds = 14.7702734
Thread number 0 finished.
Count = 11656
Thread number 2 finished.
Count = 11114
await Task.Run get next work item with return brute force and continuation:
Number of primes is : 41538
Total seconds = 14.7945692</pre>
<p>Surprisingly, I have to marshal the textbox output onto the UI thread:</p>
<pre>public static class ExtensionMethods
{
  public static void AppendLine(this TextBox tb, string text)
  {
    tb.Invoke(() =&gt; tb.AppendText(text + &quot;\r\n&quot;));
  }

  public static void Invoke(this Control control, Action action)
  {
    if (control.InvokeRequired)
    {
      // We want a synchronous call here!!!!
      control.Invoke((Delegate)action);
    }
    else
    {
      action();
    }
  }
}</pre>
<p>Earlier I had said that the continuation in a WinForm application is on the 
caller thread, which would be the UI thread.&nbsp; What's going on?&nbsp; Well, 
quite a mess actually.&nbsp; First, the <code>DurationOf</code> method:</p>
<pre>protected void DurationOf(Func&lt;int&gt; action, string section)
{
  var start = DateTime.Now;
  int numPrimes = action();
  var stop = DateTime.Now;

  lock (locker)
  {
    tbOutput.AppendLine(section);
    tbOutput.AppendLine(&quot;Number of primes is : &quot; + numPrimes);
    tbOutput.AppendLine(&quot;Total seconds = &quot; + (stop - start).TotalSeconds);
  }
}</pre>
<p>is executing on a non-UI thread, so those <code>AppendLine</code> (an extension method I 
wrote) calls must be marshaled onto the UI thread:</p>
<pre>tbOutput.BeginInvoke(() =&gt;
{
  tbOutput.AppendLine(section);
  tbOutput.AppendLine(&quot;Number of primes is : &quot; + numPrimes);
  tbOutput.AppendLine(&quot;Total seconds = &quot; + (stop - start).TotalSeconds);
});</pre>
<p>Second, we have a deadlock because the process is initiated in the Shown 
event handler:</p>
<pre>private void OnFormShown(object sender, EventArgs e)
{
  DurationOf(
    TaskAwaitGetNextWorkItemBruteForceWithReturnAndContinuation,
      &quot;await Task.Run get next work item with return brute force and continuation:&quot;);
}</pre>
<p>this blocks the UI thread because we wait for the tasks to complete:</p>
<pre>Task.WaitAll(tasks.ToArray());</pre>
<p>The call to perform the work:</p>
<pre>var t = await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum));</pre>
<p>will attempt to marshal back onto the UI thread, but it can't process the 
behind-the-scenes message that is queued onto the UI message queue because the 
UI thread is waiting for the tasks to complete -- therefore the continuation 
never happens and the task is also not completed.&nbsp; The above line is the 
equivalent of:</p>
<pre>var t = await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum)).ConfigureAwait(true);</pre>
<p>which is the default behavior -- try to execute the continuation on the 
thread awaiting the task.&nbsp; If we use:</p>
<pre>var t = await Task.Run(() =&gt; AwaitableBruteForceAlgorithm(threadNum)).ConfigureAwait(false);</pre>
<p>then the task completes and the continuation executes on the same thread (or 
it can execute on a new thread) as the thread the task was running on.&nbsp; 
However, this means that we now need to marshal the textbox updates onto the UI 
thread.&nbsp; We can't wrap the implementation of <code>OnFormShown</code> in a task, because 
that creates a thread, so we're no longer on the UI thread even if we use 
<code>ConfigureAwait(true)</code>. </p>
<p>This is the conundrum of <i>CPU bound</i> work -- a task that is not 
associated with an I/O completion event but rather executes cycles on the caller 
thread until the work is done.&nbsp; The fix for this is to invert the idea 
above -- the task itself (<code>AwaitableBruteForceAlgorithm</code>) must itself create an 
inner task, which we don't care is running on a new thread:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Semaphores and queuing work</p>
<p>Task.Run</p>
<p>async tasks</p>
<p>&quot;doing CPU work&quot;&nbsp; google it</p>
<p>ThreadPool.QueueUserWorkItem / BackgroundWorker</p>
<p>Working with the ThreadPool:
<a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool">
https://docs.microsoft.com/en-us/dotnet/standard/threading/the-managed-thread-pool</a> </p>
<p>Task Completion: https://stackoverflow.com/questions/16063520/how-do-you-create-an-asynchronous-method-in-c</p>
<p>Thread / Task Cancellation</p>
<p>Thread Exceptions</p>
<p>Mutex, ManualResetEvent, AutoResetEvent</p>
<p>&nbsp;</p>
<p><sup>1</sup> -&nbsp; the Intel CPU LOCK instruction supports ADD, ADC, AND, 
BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, 
and XCHG</p>
<p><sup>2</sup> - 
<a href="https://stackoverflow.com/questions/868568/what-do-the-terms-cpu-bound-and-i-o-bound-mean">https://stackoverflow.com/questions/868568/what-do-the-terms-cpu-bound-and-i-o-bound-mean</a></p>
<p><sup>3</sup> -
<a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/implementing-the-task-based-asynchronous-pattern">
https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/implementing-the-task-based-asynchronous-pattern</a> </p>
<p><sup>4</sup> -
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686908(v=vs.85).aspx">
https://msdn.microsoft.com/en-us/library/windows/desktop/ms686908(v=vs.85).aspx</a> </p>
<p><sup>5</sup> -
<a href="https://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext(v=vs.110).aspx">
https://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext(v=vs.110).aspx</a> </p>
<p><sup>6</sup> - <a href="https://msdn.microsoft.com/magazine/gg598924.aspx">
https://msdn.microsoft.com/magazine/gg598924.aspx</a> </p>
<p><sup>7</sup> -
<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/async-return-types">
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/async-return-types</a> </p>
<p><sup>8</sup> -
<a href="https://blogs.msdn.microsoft.com/pfxteam/2011/10/24/task-run-vs-task-factory-startnew/">
https://blogs.msdn.microsoft.com/pfxteam/2011/10/24/task-run-vs-task-factory-startnew/</a> </p>
<p>&nbsp;</p>
<p>Calling the algorithm:</p>
<p>The implementation:</p>
<p>The worker thread:</p>
<p>The results:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>